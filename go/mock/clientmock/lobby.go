// Automatically generated by MockGen. DO NOT EDIT!
// Source: ./go/client/lobby.go

package clientmock

import (
	context "code.google.com/p/go.net/context"
	proto_lobby "github.com/opentarock/service-api/go/proto_lobby"
	gomock "code.google.com/p/gomock/gomock"
)

// Mock of LobbyClient interface
type MockLobbyClient struct {
	ctrl     *gomock.Controller
	recorder *_MockLobbyClientRecorder
}

// Recorder for MockLobbyClient (not exported)
type _MockLobbyClientRecorder struct {
	mock *MockLobbyClient
}

func NewMockLobbyClient(ctrl *gomock.Controller) *MockLobbyClient {
	mock := &MockLobbyClient{ctrl: ctrl}
	mock.recorder = &_MockLobbyClientRecorder{mock}
	return mock
}

func (_m *MockLobbyClient) EXPECT() *_MockLobbyClientRecorder {
	return _m.recorder
}

func (_m *MockLobbyClient) CreateRoom(ctx context.Context, name string, options *proto_lobby.RoomOptions) (*proto_lobby.CreateRoomResponse, error) {
	ret := _m.ctrl.Call(_m, "CreateRoom", ctx, name, options)
	ret0, _ := ret[0].(*proto_lobby.CreateRoomResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLobbyClientRecorder) CreateRoom(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateRoom", arg0, arg1, arg2)
}

func (_m *MockLobbyClient) JoinRoom(ctx context.Context, roomId string) (*proto_lobby.JoinRoomResponse, error) {
	ret := _m.ctrl.Call(_m, "JoinRoom", ctx, roomId)
	ret0, _ := ret[0].(*proto_lobby.JoinRoomResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLobbyClientRecorder) JoinRoom(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "JoinRoom", arg0, arg1)
}

func (_m *MockLobbyClient) LeaveRoom(ctx context.Context) (*proto_lobby.LeaveRoomResponse, error) {
	ret := _m.ctrl.Call(_m, "LeaveRoom", ctx)
	ret0, _ := ret[0].(*proto_lobby.LeaveRoomResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLobbyClientRecorder) LeaveRoom(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LeaveRoom", arg0)
}

func (_m *MockLobbyClient) ListRooms(ctx context.Context) (*proto_lobby.ListRoomsResponse, error) {
	ret := _m.ctrl.Call(_m, "ListRooms", ctx)
	ret0, _ := ret[0].(*proto_lobby.ListRoomsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLobbyClientRecorder) ListRooms(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListRooms", arg0)
}

func (_m *MockLobbyClient) RoomInfo(ctx context.Context, roomId string) (*proto_lobby.RoomInfoResponse, error) {
	ret := _m.ctrl.Call(_m, "RoomInfo", ctx, roomId)
	ret0, _ := ret[0].(*proto_lobby.RoomInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLobbyClientRecorder) RoomInfo(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RoomInfo", arg0, arg1)
}

func (_m *MockLobbyClient) StartGame(ctx context.Context) (*proto_lobby.StartGameResponse, error) {
	ret := _m.ctrl.Call(_m, "StartGame", ctx)
	ret0, _ := ret[0].(*proto_lobby.StartGameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLobbyClientRecorder) StartGame(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StartGame", arg0)
}

func (_m *MockLobbyClient) PlayerReady(ctx context.Context, state string) (*proto_lobby.PlayerReadyResponse, error) {
	ret := _m.ctrl.Call(_m, "PlayerReady", ctx, state)
	ret0, _ := ret[0].(*proto_lobby.PlayerReadyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLobbyClientRecorder) PlayerReady(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PlayerReady", arg0, arg1)
}
