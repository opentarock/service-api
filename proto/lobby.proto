package proto_lobby;

message Player {
  required uint64 user_id = 1;
  required string nickname = 2;
}

message Room {
  required string id = 1;
  required string name = 2;
  optional RoomOptions options = 3;
  required Player owner = 4;
  repeated Player players = 5;
}

message RoomOptions {
  optional bool private = 1 [default = false];
  optional string password = 2;
  optional bool autostart = 3 [default = false];
  optional bool fill_bots = 4 [default = true];
}

// Requires proto_headers.AuthorizationHeader to be sent as header.
message CreateRoomRequest {
  required string name = 1;
  required RoomOptions options = 2;
}

message CreateRoomResponse {
  enum ErrorCode {
    ALREADY_IN_ROOM = 0;
  }
  optional Room room = 1;
  optional ErrorCode error_code = 2;
}

// Requires proto_headers.AuthorizationHeader to be sent as header.
message JoinRoomRequest {
  required string room_id = 1;
}

message JoinRoomResponse {
  enum ErrorCode {
    ROOM_DOES_NOT_EXIST = 0;
    ROOM_FULL = 1;
  }
  optional Room room = 1;
  optional ErrorCode error_code = 2;
}

message JoinRoomEvent {
  required Player player = 1;
}

// Requires proto_headers.AuthorizationHeader to be sent as header.
message LeaveRoomRequest {}

message LeaveRoomResponse {
  enum ErrorCode {
    NOT_IN_ROOM = 0;
    START_IN_PROGRESS = 1;
  }
  optional ErrorCode error_code = 1;
}

message LeaveRoomEvent {
  required uint64 player_id = 1;
}

// Requires proto_headers.AuthorizationHeader to be sent as header.
message ListRoomsRequest {}

message ListRoomsResponse {
  repeated Room rooms = 1;
}

message RoomInfoRequest {
  required string room_id = 1;
}

message RoomInfoResponse {
  enum ErrorCode {
    ROOM_DOES_NOT_EXIST = 0;
  }
  optional ErrorCode error_code = 1;
  optional Room room = 2;
}

// Requires proto_headers.AuthorizationHeader to be sent as header.
message StartGameRequest {}

message StartGameResponse {
  enum ErrorCode {
    NOT_IN_ROOM = 0;
    NOT_OWNER = 1;
    ALREADY_STARTED = 2;
  }
  optional ErrorCode error_code = 1;
}

message StartGameEvent {
  required string room_id = 1;
  required string state = 2;
}

// Requires proto_headers.AuthorizationHeader to be sent as header.
message PlayerReadyRequest {
  required string state = 1;
}

message PlayerReadyResponse {
  enum ErrorCode {
    NOT_IN_ROOM = 0;
    UNEXPECTED = 1;
    ALREADY_READY = 2;
    INVALID_STATE = 3;
  }
  optional ErrorCode error_code = 1;
}

message PlayerReadyEvent {
  required uint64 user_id = 1;
}
